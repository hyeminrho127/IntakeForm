{"ast":null,"code":"var _jsxFileName = \"/Users/hyeminrho/Desktop/immigr8/IntakeForm/frontend/src/components/Form.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport ProcessingInformation from './ProcessingInformation'; // Import the ProcessingInformation component\nimport { Link } from 'react-router-dom'; // Import Link from react-router-dom\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Form() {\n  _s();\n  const alienRegistrationInputRefs = useRef([]);\n  const [countryOfBirth, setCountryOfBirth] = useState('');\n  const [provinceOfBirth, setProvinceOfBirth] = useState('');\n  const [countryOfCitizenship, setCountryOfCitizenship] = useState('');\n  const [alienRegistrationNumber, setAlienRegistrationNumber] = useState(['', '', '', '', '', '', '', '', '']);\n  const handleAlienRegistrationChange = (e, index) => {\n    const newValue = e.target.value;\n    const newRegistrationNumber = [...alienRegistrationNumber];\n    newRegistrationNumber[index] = newValue;\n    setAlienRegistrationNumber(newRegistrationNumber);\n\n    // Automatically focus on the next input field if not the last one\n    if (index < alienRegistrationInputRefs.current.length - 1 && newValue.length === 1) {\n      alienRegistrationInputRefs.current[index + 1].focus();\n    }\n  };\n  const handleNext = async () => {\n    try {\n      if (formattedAlienRegistrationNumber.length === 0 || countryOfBirth.trim() === '' || countryOfCitizenship.trim() === '') {\n        console.error('Please fill in all required fields.');\n        return; // Don't proceed with the request if any required field is empty\n      }\n\n      const formattedAlienRegistrationNumber = alienRegistrationNumber.join('');\n      // Send formattedAlienRegistrationNumber and formattedArrivalDepartureRecordNumber to the backend for processing\n      console.log(formattedAlienRegistrationNumber);\n      console.log(countryOfBirth);\n      console.log(provinceOfBirth);\n      console.log(countryOfCitizenship);\n      const formData = {\n        anum: formattedAlienRegistrationNumber,\n        country: countryOfBirth,\n        province: provinceOfBirth,\n        nationality: countryOfCitizenship\n      };\n      // Make the POST request to your backend API endpoint\n      const response = await axios.post('http://localhost:3001/api/beneficiary_info', formData);\n\n      // Check if the request was successful\n      if (response.status === 200) {\n        // Handle success, e.g., show a success message or redirect to a confirmation page\n        console.log('Form data saved successfully:', response.data);\n      } else {\n        // Handle other status codes or errors\n        console.error('Error:', response.data);\n      }\n    } catch (error) {\n      // Handle network errors or exceptions\n      console.error('An error occurred:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Immigration Form\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"alienRegistrationNumber\",\n          children: \"Alien Registration Number:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"alien-registration-number\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              fontWeight: 'bold',\n              marginRight: '5px'\n            },\n            children: \"A-\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }, this), alienRegistrationNumber.map((section, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: section,\n            onChange: e => handleAlienRegistrationChange(e, index),\n            maxLength: \"1\",\n            pattern: \"\\\\d\",\n            required: index === 0 // Require the first section\n            ,\n            style: {\n              width: '20px',\n              // Set the width for each digit input\n              marginRight: '5px',\n              // Add some spacing between digits\n              textAlign: 'center' // Center-align the digit\n            },\n\n            ref: el => alienRegistrationInputRefs.current[index] = el\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"countryOfBirth\",\n          children: \"Country of Birth:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"countryOfBirth\",\n          name: \"countryOfBirth\",\n          value: countryOfBirth // This sets the initial value from state\n          ,\n          onChange: e => setCountryOfBirth(e.target.value) // Update the state when the field value changes\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"provinceOfBirth\",\n          children: \"Province of Birth:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"provinceOfBirth\",\n          name: \"provinceOfBirth\",\n          value: provinceOfBirth // This sets the initial value from state\n          ,\n          onChange: e => setProvinceOfBirth(e.target.value) // Update the state when the field value changes\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"countryOfCitizenship\",\n          children: \"Country of Citizenship or Nationality:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"countryOfCitizenship\",\n          name: \"countryOfCitizenship\",\n          value: countryOfCitizenship // This sets the initial value from state\n          ,\n          onChange: e => setCountryOfCitizenship(e.target.value) // Update the state when the field value changes\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNext,\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/processing\",\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n_s(Form, \"uj1zPYSN45RYoq4zCFh8omQvpX0=\");\n_c = Form;\nexport default Form;\nvar _c;\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"names":["React","useState","useRef","ProcessingInformation","Link","axios","jsxDEV","_jsxDEV","Form","_s","alienRegistrationInputRefs","countryOfBirth","setCountryOfBirth","provinceOfBirth","setProvinceOfBirth","countryOfCitizenship","setCountryOfCitizenship","alienRegistrationNumber","setAlienRegistrationNumber","handleAlienRegistrationChange","e","index","newValue","target","value","newRegistrationNumber","current","length","focus","handleNext","formattedAlienRegistrationNumber","trim","console","error","join","log","formData","anum","country","province","nationality","response","post","status","data","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","className","style","fontWeight","marginRight","map","section","type","onChange","maxLength","pattern","required","width","textAlign","ref","el","id","name","onClick","to","_c","$RefreshReg$"],"sources":["/Users/hyeminrho/Desktop/immigr8/IntakeForm/frontend/src/components/Form.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport ProcessingInformation from './ProcessingInformation'; // Import the ProcessingInformation component\nimport { Link } from 'react-router-dom'; // Import Link from react-router-dom\nimport axios from 'axios';\n\nfunction Form() {\n  const alienRegistrationInputRefs = useRef([]);\n  const [countryOfBirth, setCountryOfBirth] = useState('');\n  const [provinceOfBirth, setProvinceOfBirth] = useState('');\n  const [countryOfCitizenship, setCountryOfCitizenship] = useState('');\n\n\n  const [alienRegistrationNumber, setAlienRegistrationNumber] = useState(['', '', '', '', '', '', '', '', '']);\n\n  const handleAlienRegistrationChange = (e, index) => {\n    const newValue = e.target.value;\n     const newRegistrationNumber = [...alienRegistrationNumber];\n      newRegistrationNumber[index] = newValue;\n      setAlienRegistrationNumber(newRegistrationNumber);\n\n      // Automatically focus on the next input field if not the last one\n      if (index < alienRegistrationInputRefs.current.length - 1 && newValue.length === 1) {\n        alienRegistrationInputRefs.current[index + 1].focus();\n      }\n  };\n\n\n\n  const handleNext = async () => {\n  try {\n     if (\n      formattedAlienRegistrationNumber.length === 0 ||\n      countryOfBirth.trim() === '' ||\n      countryOfCitizenship.trim() === ''\n    ) {\n      console.error('Please fill in all required fields.');\n      return; // Don't proceed with the request if any required field is empty\n    }\n    const formattedAlienRegistrationNumber = alienRegistrationNumber.join('');\n    // Send formattedAlienRegistrationNumber and formattedArrivalDepartureRecordNumber to the backend for processing\n    console.log(formattedAlienRegistrationNumber);\n    console.log(countryOfBirth);\n    console.log(provinceOfBirth);\n    console.log(countryOfCitizenship);\n\n    const formData = {\n      anum: formattedAlienRegistrationNumber,\n      country: countryOfBirth,\n      province: provinceOfBirth,\n      nationality: countryOfCitizenship,\n    };\n    // Make the POST request to your backend API endpoint\n    const response = await axios.post('http://localhost:3001/api/beneficiary_info', formData);\n\n    // Check if the request was successful\n    if (response.status === 200) {\n      // Handle success, e.g., show a success message or redirect to a confirmation page\n      console.log('Form data saved successfully:', response.data);\n    } else {\n      // Handle other status codes or errors\n      console.error('Error:', response.data);\n    }\n  } catch (error) {\n    // Handle network errors or exceptions\n    console.error('An error occurred:', error);\n  }\n};\n\n\n   return (\n    <div>\n      <h2>Immigration Form</h2>\n      <form>\n        {/* Alien Registration Number */}\n        <div>\n          <label htmlFor=\"alienRegistrationNumber\">Alien Registration Number:</label>\n          <div className=\"alien-registration-number\">\n            <span style={{ fontWeight: 'bold', marginRight: '5px' }}>A-</span>\n            {alienRegistrationNumber.map((section, index) => (\n              <input\n                type=\"text\"\n                key={index}\n                value={section}\n                onChange={(e) => handleAlienRegistrationChange(e, index)}\n                maxLength=\"1\"\n                pattern=\"\\d\"\n                required={index === 0} // Require the first section\n                style={{\n                  width: '20px', // Set the width for each digit input\n                  marginRight: '5px', // Add some spacing between digits\n                  textAlign: 'center', // Center-align the digit\n                }}\n                ref={(el) => (alienRegistrationInputRefs.current[index] = el)}\n              />\n            ))}\n          </div>\n        </div>\n\n        {/* Country of Birth */}\n        <div>\n          <label htmlFor=\"countryOfBirth\">Country of Birth:</label>\n          <input\n              type=\"text\"\n              id=\"countryOfBirth\"\n              name=\"countryOfBirth\"\n              value={countryOfBirth} // This sets the initial value from state\n              onChange={(e) => setCountryOfBirth(e.target.value)} // Update the state when the field value changes\n            />\n        </div>\n\n        {/* Province of Birth */}\n        <div>\n          <label htmlFor=\"provinceOfBirth\">Province of Birth:</label>\n          <input\n            type=\"text\"\n            id=\"provinceOfBirth\"\n            name=\"provinceOfBirth\"\n            value={provinceOfBirth} // This sets the initial value from state\n            onChange={(e) => setProvinceOfBirth(e.target.value)} // Update the state when the field value changes\n                     />\n        </div>\n\n        {/* Country of Citizenship or Nationality */}\n        <div>\n          <label htmlFor=\"countryOfCitizenship\">Country of Citizenship or Nationality:</label>\n          <input\n            type=\"text\"\n            id=\"countryOfCitizenship\"\n            name=\"countryOfCitizenship\"\n            value={countryOfCitizenship} // This sets the initial value from state\n            onChange={(e) => setCountryOfCitizenship(e.target.value)} // Update the state when the field value changes\n                      />\n        </div>\n\n        <button onClick={handleNext}>\n          <Link to=\"/processing\">Next</Link>\n      </button>  \n      </form>\n    </div>\n  );\n}\n\nexport default Form;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}